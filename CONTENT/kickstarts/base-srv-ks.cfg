
#platform=x86, AMD64 oder Intel EM64T
#version=DEVEL

# Root password
rootpw --plaintext redhat
# System authorization information
auth  --useshadow  --passalgo=sha512

# System language
# Keyboard layouts
# System timezone
lang en_US
keyboard 'de-latin1-nodeadkeys'
timezone Europe/Berlin

# Reboot after installation
reboot

# Use graphical install
text
#graphical

# Network information
network  --onboot=yes --bootproto=dhcp
# Firewall configuration
firewall --enabled --ssh --port=9090:tcp

# Use hard drive installation media (without the iso is used)
# harddrive --dir=Packages --partition=/dev/disk/by-label/CONTENT
# SELinux configuration
selinux --enforcing

# Do not configure the X Window System
skipx
# No firstboot
#firstboot --disable

%pre --interpreter=/bin/bash --log=/tmp/pre.log
# Dynamically find boot disk to install on
# Parameters --interpreter=/bin/bash
bootdisk=$(lsblk -nlI 8,252 -o NAME,LABEL | awk '( $2 == "RHEL_DEMO" ) { print $1} ' | tr -d '[0-9]')
[ -z "${bootdisk}" ] && echo "ERROR: Could not identify bootdisk" && exit 1
disk=$(lsblk -ndI 8,252,259 -o NAME | grep -v ${bootdisk} | head -1)
disk2=$(lsblk -ndI 8,252,259 -o NAME | grep -v ${bootdisk} | grep -v ${disk} |  head -1)
[ -z "${disk}" ] && echo "ERROR: No disk to install found" && exit 1

( # bootloader
  echo "bootloader --location=mbr --boot-drive=${disk}"
  # Partition clearing information
  zerombr
  # Disk partitioning information
  [ -z "${disk2}" ] && echo "clearpart --drives=${disk} --all" || echo "clearpart --drives=${disk},${disk2} --all"
  echo "part /boot --fstype=ext4 --ondisk=${disk} --grow --maxsize=512 --size=300"
  [ -d /sys/firmware/efi ] && echo "part /boot/efi --fstype=efi --grow --maxsize=200 --size=20"
  echo "part pv.20 --ondisk=${disk} --size=1024 --grow"
  [ -n "${disk2}" ] && echo "part pv.21 --ondisk=${disk2} --size=512 --grow"
  [ -z "${disk2}" ] && echo "volgroup rhel pv.20" || echo "volgroup rhel pv.20 pv.21"
  echo "logvol /    --fstype=ext4 --size=512 --grow --name=lv_root --vgname=rhel"
  echo "logvol swap --fstype="swap" --size=1024 --recommended --name=lv_swap --vgname=rhel"
) > /tmp/dynamic-cfg.ks 
%end

%include "/tmp/dynamic-cfg.ks"

%packages --ignoremissing
@core
ansible
bind-utils
yum-utils
unzip
usbutils
traceroute
screen
tcpdump
strace
pciutils
net-tools
rsync
lsof
bzip2
cryptsetup
wget
chrony
kexec-tools
virt-what
bash-completion
cockpit
%end


# Installation logging level
logging --level=debug

%post --interpreter=/bin/bash --log=/root/post.log
# save preinstall log files
cat > /root/pre.log << EOF
%include /tmp/pre.log
EOF
echo "--------------------------------------"
echo "Mount USB Content"
echo 
set -x
mkdir /tmp/usb
mount /dev/disk/by-label/CONTENT /tmp/usb

if [ ! -z "$(virt-what)" ]; then
  # this is done after server is build, so update server should be up and running
  echo "--------------------------------------"
  echo "Updating packages"
  echo 
  gwip=$(route -n | awk ' ( $1 == "0.0.0.0" ) { print $2 } ')
  if [ -z "${gwip}" ]; then
     echo "Could not find default gateway! update failed"
  else
    echo "sslverify=false" >> /etc/yum.conf
    echo "Fetching Repository from ${gwip}"
    curl -k https://${gwip}/repofiles/rhel-7-server-e4s-rpms.repo >> /etc/yum.repos.d/rhel-7-server-e4s-rpms.repo
    yum -y update
  fi
  echo "--------------------------------------"
  echo "Enabling cockpit server"
  echo 
  firewall-cmd --permanent --add-port=9090/tcp
  systemctl enable cockpit.socket
  echo "--------------------------------------"
  echo "Injecting ssh key"
  echo 
  [ ! -d /root/.ssh ] && mkdir /root/.ssh && chmod 700 /root/.ssh
  cp /tmp/usb/data/ansible-ssh-key.pub /root/.ssh/authorized_keys
  chmod 600 /root/.ssh/authorized_keys
  echo "--------------------------------------"
  echo "Adding console on serial"
  echo
  if grep -q 'GRUB_CMDLINE_LINUX=.*console=.*' /etc/default/grub; then 
     echo "WARNING: Console is already set to something"
  else
     sed -i 's/^GRUB_CMDLINE_LINUX=\"\(.*\)\"/GRUB_CMDLINE_LINUX=\"\1 console=ttyS0,115200\"/g' /etc/default/grub
     grub2-mkconfig -o /boot/grub2/grub.cfg
  fi
  echo "--------------------------------------"
  echo "Cleaning up for templating"
  echo
  yum clean all
  #TODO: remove UUID and HWADDR from /etc/init.d/network-scripts
  ( cd /etc/sysconfig/network-scripts/
    mv ifcfg-eth0 ifcfg-eth0.old &&\
    awk -F'=' '( $1 != "HWADDR" ) && ( $1 != "UUID" ) { print $0 }' ifcfg-eth0.old > ifcfg-eth0 &&\
    rm -f ifcfg-eth0.old )
  echo "--------------------------------------"
  echo "The template is build."
else 
 echo "--------------------------------------"
 echo "Update system"
 echo ""
 # Copy to local, needed anyway later
 [ ! -d /var/www/html/repos ] && mkdir -p /var/www/html/repos
 [ ! -d /var/www/html/repofiles ] && mkdir -p /var/www/html/repofiles
 rsync -avP /tmp/usb/downloads/redhat-repos/ /var/www/html/repos/
 # create temporary & server repofile
 ( cd /var/www/html/repos/
   rf=/etc/yum.repos.d/local-redhat.repo
   echo "# local repofile" > $rf
   ls -l | grep ^d | awk '{print $9}' | while read dirs; do
      echo "[$dirs]" >> $rf
      echo "name=$dirs" >> $rf
      echo "baseurl=file:///var/www/html/repos/${dirs}/" >> $rf
      echo "enabled=1" >> $rf
      echo "gpgcheck=0" >> $rf
      echo "" >> $rf 
      rfs=/var/www/html/repofiles/${dirs}.repo
      echo "[$dirs]" > $rfs
      echo "name=$dirs" >> $rfs
      echo "baseurl=https://tower/repos/${dirs}/" >> $rfs
      echo "enabled=1" >> $rfs
      echo "gpgcheck=0" >> $rfs
   done )
 restorecon -vvR /var/www/html
 yum -y update
 yum -y install ansible cockpit-dashboard cockpit-machines

 echo "--------------------------------------"
 echo "Enabling cockpit server"
 echo 
 firewall-cmd --permanent --add-port=9090/tcp
 systemctl enable cockpit.socket

 echo "--------------------------------------"
 echo "Copy SSH Keys"
 echo 
 [ ! -d /var/lib/awx/projects/rhsap-demo ] && mkdir -p /var/lib/awx/projects/rhsap-demo 
 rsync -avP /tmp/usb/ansible-files/ /var/lib/awx/projects/rhsap-demo
 if [ -f /tmp/usb/data/ansible-ssh-key ]; then
	[ ! -d /root/.ssh ] && mkdir /root/.ssh
	cp /tmp/usb/data/ansible-ssh-key /root/.ssh/id_rsa
 	chmod 600 /root/.ssh/id_rsa
	cp /tmp/usb/data/ansible-ssh-key.pub /root/.ssh/id_rsa.pub
	chmod 644 /root/.ssh/id_rsa.pub
        chcon -u system_u -t ssh_home_t /root/.ssh/id_rsa*
 fi
 if [ -f /tmp/usb/data/authorized_keys ]; then
         cp /tmp/usb/data/authorized_keys /root/.ssh/authorized_keys
         chmod 644 /root/.ssh/authorized_keys
         chcon -u system_u -t ssh_home_t /root/.ssh/authorized_keys
 fi
 if [ -f /tmp/usb/data/ansible-ssh-key.pub ]; then
	cat /tmp/usb/data/ansible-ssh-key.pub >> /root/.ssh/authorized_keys
 fi
         
 ### TODO: Copy the scripts from the data-section .... 
  
  echo "--------------------------------------"
  echo "Create firstboot finish script"
  echo 
  for s in /tmp/usb/data/init-scripts/*.sh; do
    cp $s /etc/init.d/
    chmod 755 $s
    chcon -u system_u -t initrc_exec_t $s # Otherwise it doesn't run :-/
  done
  for s in /tmp/usb/data/systemd-services/*.service; do
    cp $s /etc/systemd/system/
    chcon -u system_u -t systemd_unit_file_t $s
    chmod 755 $s 
    systemctl enable $(basename ${s})
  done

 
echo "-- The End ---------------------------"

fi

%end
